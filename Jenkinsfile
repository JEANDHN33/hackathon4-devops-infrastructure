cat > Jenkinsfile << 'EOF'
pipeline {
    agent any

    tools {
        maven 'Maven'
        jdk 'Java-17'
    }

    environment {
        // Configuration sp√©cifique Hackathon 4
        DOCKER_IMAGE = 'hackathon4-store-api'
        API_SERVER_IP_CRED_ID = 'api-server-ip-id'
        GITHUB_TOKEN_CRED_ID = 'github-token-id'
        DEPLOYMENT_DIR = '/opt/api-deployment'
        
        // Configuration build
        MAVEN_OPTS = '-Xmx1024m -XX:MaxPermSize=256m'
        JAVA_TOOL_OPTIONS = '-Dfile.encoding=UTF8'
    }

    triggers {
        githubPush()
        // D√©clenchement p√©riodique pour les tests (optionnel)
        cron('H 2 * * 1-5') // Tous les jours de semaine √† 2h du matin
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source depuis GitHub...'
                
                script {
                    // Nettoyage de l'workspace
                    cleanWs()
                }
                
                withCredentials([string(credentialsId: "${GITHUB_TOKEN_CRED_ID}", variable: 'GITHUB_TOKEN')]) {
                    script {
                        // Configuration Git pour l'authentification
                        sh '''
                            git config --global credential.helper store
                            echo "https://${GITHUB_TOKEN}:@github.com" > ~/.git-credentials
                            
                            echo "üîç Configuration Git :"
                            git config --global --list | grep -E "(user|credential)" || true
                        '''
                        
                        // Checkout du repository
                        git url: "https://github.com/JEANDHN33/hackathon4-devops-infrastructure.git", 
                            branch: 'main',
                            credentialsId: "${GITHUB_TOKEN_CRED_ID}"
                    }
                }
                
                script {
                    // Variables d'environnement pour le build
                    env.BUILD_TIMESTAMP = sh(
                        script: 'date +"%Y-%m-%d_%H-%M-%S"',
                        returnStdout: true
                    ).trim()
                    
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                }
                
                echo "‚úÖ Code r√©cup√©r√© - Commit: ${env.GIT_COMMIT_SHORT}"
            }
        }

        stage('Environment Check') {
            steps {
                echo 'üîç V√©rification de l\'environnement Jenkins...'
                
                sh '''
                    echo "=== üîß Versions des outils ==="
                    java -version
                    mvn -version
                    docker --version
                    
                    echo "=== üìã Variables d'environnement ==="
                    echo "BUILD_NUMBER: ${BUILD_NUMBER}"
                    echo "BUILD_TIMESTAMP: ${BUILD_TIMESTAMP}"
                    echo "GIT_COMMIT: ${GIT_COMMIT_SHORT}"
                    echo "DOCKER_IMAGE: ${DOCKER_IMAGE}"
                    
                    echo "=== üìÅ Structure du projet ==="
                    ls -la
                    
                    echo "=== ‚òï Configuration Maven ==="
                    cat pom.xml | grep -A 5 -B 5 "<version>\|<java.version>\|<spring-boot.version>" || true
                '''
            }
        }

        stage('Build & Test') {
            parallel {
                stage('Compile') {
                    steps {
                        echo 'üèóÔ∏è Compilation du projet Store API...'
                        
                        sh '''
                            echo "üßπ Nettoyage..."
                            mvn clean
                            
                            echo "‚öôÔ∏è Compilation..."
                            mvn compile -DskipTests=true
                            
                            echo "‚úÖ Compilation termin√©e"
                        '''
                    }
                }
                
                stage('Tests') {
                    steps {
                        echo 'üß™ Ex√©cution des tests unitaires...'
                        
                        sh '''
                            echo "üß™ Lancement des tests..."
                            mvn test -Dtest.skip=false
                            
                            echo "üìä R√©sultats des tests :"
                            find target/surefire-reports -name "*.xml" | wc -l | sed 's/^/Fichiers de r√©sultats: /'
                            
                            echo "‚úÖ Tests termin√©s"
                        '''
                    }
                    post {
                        always {
                            // Publication des r√©sultats de tests
                            junit allowEmptyResults: true, testResultsGlob: 'target/surefire-reports/*.xml'
                            
                            // Archivage des rapports
                            archiveArtifacts artifacts: 'target/surefire-reports/**/*', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Package') {
            steps {
                echo 'üì¶ Packaging de l\'application Store...'
                
                sh '''
                    echo "üì¶ Cr√©ation du JAR..."
                    mvn package -DskipTests=true
                    
                    echo "üìã Artefacts g√©n√©r√©s :"
                    find target -name "*.jar" -type f -exec ls -lh {} \;
                    
                    # Renommage pour simplifier
                    cd target
                    if [ -f store-0.0.1-SNAPSHOT.jar ]; then
                        cp store-0.0.1-SNAPSHOT.jar hackathon4-store.jar
                        echo "‚úÖ JAR renomm√© en hackathon4-store.jar"
                    fi
                '''
                
                // Archivage des artefacts
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker ARM64...'
                
                script {
                    // Construction de l'image Docker optimis√©e ARM64
                    sh '''
                        echo "üèóÔ∏è Construction de l'image Docker..."
                        
                        # Construction avec buildx pour ARM64
                        docker buildx build \
                            --platform linux/arm64 \
                            --build-arg JAR_FILE=target/hackathon4-store.jar \
                            -t ${DOCKER_IMAGE}:${BUILD_NUMBER} \
                            -t ${DOCKER_IMAGE}:latest \
                            -t ${DOCKER_IMAGE}:${BUILD_TIMESTAMP} \
                            --load \
                            .
                        
                        echo "‚úÖ Image Docker cr√©√©e :"
                        docker images | grep ${DOCKER_IMAGE} | head -5
                    '''
                }
            }
        }

        stage('Prepare Deployment Files') {
            steps {
                echo 'üìã Pr√©paration des fichiers de d√©ploiement...'
                
                sh '''
                    echo "üìÅ Cr√©ation des fichiers de d√©ploiement..."
                    
                    # Script de d√©ploiement optimis√©
                    cat > deploy.sh << 'DEPLOY_EOF'
#!/bin/bash

echo "üöÄ D√©ploiement Store API - Hackathon 4"
echo "======================================"

cd ${DEPLOYMENT_DIR}

echo "‚èπÔ∏è Arr√™t des services existants..."
docker-compose down --remove-orphans

echo "üßπ Nettoyage des anciens containers..."
docker system prune -f

echo "üì• Chargement de la nouvelle image..."
if [ -f hackathon4-store-api-latest.tar.gz ]; then
    docker load < hackathon4-store-api-latest.tar.gz
    echo "‚úÖ Image charg√©e"
else
    echo "‚ö†Ô∏è Aucune nouvelle image trouv√©e"
fi

echo "üöÄ D√©marrage des nouveaux services..."
docker-compose up -d

echo "‚è≥ Attente de la disponibilit√© (60s)..."
sleep 60

echo "üè• V√©rification des services..."
docker-compose ps

echo "üß™ Test de sant√© de l'API..."
for i in {1..10}; do
    if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
        echo "‚úÖ API disponible!"
        break
    else
        echo "‚è≥ Tentative $i/10 - API pas encore pr√™te..."
        sleep 10
    fi
done

echo "üìä Status final :"
curl -s http://localhost:8080/actuator/health | jq '.' || echo "Health check indisponible"

echo "‚úÖ D√©ploiement termin√©!"
DEPLOY_EOF

                    chmod +x deploy.sh
                    
                    echo "‚úÖ Fichiers de d√©ploiement pr√™ts"
                    ls -la deploy.sh docker-compose.yml
                '''
            }
        }

        stage('Save & Transfer Docker Image') {
            steps {
                echo 'üíæ Sauvegarde et transfert de l\'image Docker...'
                
                script {
                    withCredentials([string(credentialsId: "${API_SERVER_IP_CRED_ID}", variable: 'API_SERVER_IP')]) {
                        sshagent(credentials: ['hackathon4-ssh-key']) {
                            sh '''
                                echo "üíæ Cr√©ation de l'archive Docker..."
                                docker save ${DOCKER_IMAGE}:latest | gzip > ${DOCKER_IMAGE}-latest.tar.gz
                                
                                echo "üìä Taille de l'archive :"
                                ls -lh ${DOCKER_IMAGE}-latest.tar.gz
                                
                                echo "üì§ Transfert des fichiers vers l'API Server..."
                                
                                # Test de connectivit√© SSH
                                ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$API_SERVER_IP "echo 'SSH OK'"
                                
                                # Transfert des fichiers
                                scp -o StrictHostKeyChecking=no \
                                    ${DOCKER_IMAGE}-latest.tar.gz \
                                    docker-compose.yml \
                                    deploy.sh \
                                    ubuntu@$API_SERVER_IP:${DEPLOYMENT_DIR}/
                                
                                echo "‚úÖ Fichiers transf√©r√©s"
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy to API Server') {
            steps {
                echo 'üöÄ D√©ploiement sur le serveur API...'
                
                script {
                    withCredentials([string(credentialsId: "${API_SERVER_IP_CRED_ID}", variable: 'API_SERVER_IP')]) {
                        sshagent(credentials: ['hackathon4-ssh-key']) {
                            sh '''
                                echo "üöÄ Ex√©cution du d√©ploiement sur le serveur..."
                                
                                ssh -o StrictHostKeyChecking=no ubuntu@$API_SERVER_IP "
                                    cd ${DEPLOYMENT_DIR}
                                    chmod +x deploy.sh
                                    ./deploy.sh
                                "
                                
                                echo "‚úÖ D√©ploiement ex√©cut√©"
                            '''
                        }
                    }
                }
            }
        }

        stage('Health Check & Validation') {
            steps {
                echo 'üè• V√©rification finale et tests de l\'API Store...'
                
                script {
                    withCredentials([string(credentialsId: "${API_SERVER_IP_CRED_ID}", variable: 'API_SERVER_IP')]) {
                        sshagent(credentials: ['hackathon4-ssh-key']) {
                            sh '''
                                echo "üè• Tests de sant√© de l'API Store..."
                                
                                ssh -o StrictHostKeyChecking=no ubuntu@$API_SERVER_IP "
                                    cd ${DEPLOYMENT_DIR}
                                    
                                    echo 'üìä Status des containers :'
                                    docker-compose ps
                                    
                                    echo 'üè• Health Check API :'
                                    curl -s http://localhost:8080/actuator/health | jq '.' || echo 'Health check √©chou√©'
                                    
                                    echo 'üìã Endpoints Store disponibles :'
                                    curl -s http://localhost:8080/actuator | jq '._links | keys[]' || echo 'Impossible de lister les endpoints'
                                    
                                    echo 'üß™ Test des endpoints m√©tier :'
                                    # Test endpoint Users
                                    echo 'Test /users:'
                                    curl -s -w 'Status: %{http_code}\\n' http://localhost:8080/users -o /dev/null
                                    
                                    # Test endpoint Contacts  
                                    echo 'Test /contacts:'
                                    curl -s -w 'Status: %{http_code}\\n' http://localhost:8080/contacts -o /dev/null
                                "
                            '''
                        }
                    }
                    
                    // Test externe via Kong (si configur√©)
                    sh '''
                        echo "üåê Test de l'API via l'adresse publique..."
                        
                        # Test direct de l'API (remplace par l'IP Kong si configur√©)
                        API_URL="http://$API_SERVER_IP:8080"
                        
                        echo "üß™ Test Health Check public :"
                        response=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/actuator/health")
                        echo "Response code: $response"
                        
                        if [ "$response" -eq 200 ]; then
                            echo "‚úÖ API Store accessible publiquement"
                            echo "üåê URL: $API_URL/swagger-ui/index.html"
                        else
                            echo "‚ö†Ô∏è API non accessible publiquement (Status: $response)"
                            echo "üí° V√©rifiez la configuration Kong Gateway"
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage des fichiers temporaires...'
            sh '''
                # Nettoyage des archives locales
                rm -f *.tar.gz
                
                # Nettoyage des anciennes images (garde les 5 derni√®res)
                docker images ${DOCKER_IMAGE} --format "table {{.Repository}}:{{.Tag}}" | tail -n +2 | head -n -5 | awk '{print $1":"$2}' | xargs -r docker rmi || true
                
                echo "‚úÖ Nettoyage termin√©"
            '''
        }
        
        success {
            echo '''
üéâ PIPELINE STORE API R√âUSSI !
==============================

‚úÖ Code r√©cup√©r√© depuis GitHub  
‚úÖ Tests unitaires pass√©s
‚úÖ Image Docker ARM64 cr√©√©e
‚úÖ D√©ploiement sur API Server r√©ussi
‚úÖ Health checks OK

üìä Acc√®s √† l'API Store :
üåê Swagger UI: http://API_SERVER_IP:8080/swagger-ui/index.html
üè• Health: http://API_SERVER_IP:8080/actuator/health
üë• Users: http://API_SERVER_IP:8080/users  
üìû Contacts: http://API_SERVER_IP:8080/contacts

üîë Prochaines √©tapes :
1. Configurer Kong Gateway pour l'acc√®s public
2. Tester les endpoints via Kong
3. Configurer l'authentification API Key
            '''
        }
        
        failure {
            echo '''
‚ùå PIPELINE STORE API √âCHOU√â !
==============================

üîç Points de contr√¥le √† v√©rifier :
- Configuration des credentials GitHub
- Connectivit√© SSH vers l'API Server  
- Configuration Docker sur l'API Server
- Ports et Security Groups AWS
- Configuration Maven/Java

üìã Logs √† consulter :
- Console Output Jenkins
- Logs Docker sur l'API Server
- Health Check endpoints
            '''
        }
        
        unstable {
            echo '''
‚ö†Ô∏è PIPELINE INSTABLE
===================

Certains tests ont √©chou√© mais le d√©ploiement a continu√©.
V√©rifiez les r√©sultats des tests et l'√©tat de l'application.
            '''
        }
    }
}
EOF

echo "‚úÖ Jenkinsfile mis √† jour pour ton repository GitHub"
